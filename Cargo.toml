[package]
name = "livesplit-core"
version = "0.11.0"
authors = ["Christopher Serr <christopher.serr@gmail.com>"]
documentation = "https://docs.rs/livesplit-core/"
repository = "https://github.com/LiveSplit/livesplit-core"
license = "Apache-2.0/MIT"
description = "livesplit-core is a library that provides a lot of functionality for creating a speedrun timer."
readme = "README.md"
keywords = ["speedrun", "timer", "livesplit", "gaming"]
categories = ["no-std", "date-and-time"]
include = [
    "/src/*",
    "/Cargo.toml",
    "/CHANGELOG.md",
    "/CODE_OF_CONDUCT.md",
    "/LICENSE-APACHE",
    "/LICENSE-MIT",
    "/README.md"
]
edition = "2018"

[package.metadata.docs.rs]
all-features = true

[workspace]
members = ["capi", "capi/bind_gen", "capi/staticlib", "capi/cdylib", "crates/*"]
exclude = ["crates/no-std-test"]

[dependencies]
# core
base64 = { version = "0.13.0", default-features = false, features = ["alloc"] }
cfg-if = "1.0.0"
chrono = { version = "0.4.10", default-features = false, features = ["serde", "alloc"] }
derive_more = { version = "0.99.1", default-features = false, features = ["not", "add", "from", "deref"] }
hashbrown = "0.9.0"
libm = "0.2.1"
livesplit-hotkey = { path = "crates/livesplit-hotkey", version = "0.5.0", default-features = false }
livesplit-title-abbreviations = { path = "crates/livesplit-title-abbreviations", version = "0.1.0" }
odds = { version = "0.4.0", default-features = false }
ordered-float = { version = "2.0.1", default-features = false }
palette = { version = "0.5.0", default-features = false, features = ["libm"] }
serde = { version = "1.0.98", default-features = false, features = ["derive", "alloc"] }
smallstr = { version = "0.2.0", default-features = false }
snafu = { version = "0.6.0", default-features = false }
unicase = "2.6.0"

# std
bytemuck = { version = "1.2.0", optional = true }
byteorder = { version = "1.3.2", optional = true }
image = { version = "0.23.12", features = ["png"], default-features = false, optional = true }
indexmap = { version = "1.2.0", default-features = false, features = ["serde-1"], optional = true }
parking_lot = { version = "0.11.0", default-features = false, optional = true }
quick-xml = { version = "0.20.0", default-features = false, optional = true }
serde_json = { version = "1.0.8", optional = true }
utf-8 = { version = "0.7.4", optional = true }

# Rendering
euclid = { version = "0.20.0", default-features = false, optional = true }
lyon = { version = "0.17.5", default-features = false, optional = true }
rustybuzz = { version = "0.3.0", optional = true }
ttf-parser = { version = "0.9.0", optional = true }

# Font Loading
font-kit = { version = "0.10.0", optional = true }

# Software Rendering
euc = { version = "0.5.2", default-features = false, features = ["libm"], optional = true }
vek = { version = "0.12.1", default-features = false, features = ["libm"], optional = true }

# Networking
splits-io-api = { version = "0.2.0", optional = true }

[target.'cfg(all(target_arch = "wasm32", target_os = "unknown"))'.dependencies]
# WebAssembly in the Web
web-sys = { version = "0.3.28", default-features = false, features = ["Performance", "Window"], optional = true }

[dev-dependencies]
memmem = "0.1.1"
img_hash = "3.1.0"

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
criterion = "0.3.0"

[features]
default = ["image-shrinking", "std"]
doesnt-have-atomics = []
std = ["byteorder", "chrono/std", "chrono/clock", "euc/std", "image", "indexmap", "livesplit-hotkey/std", "palette/std", "parking_lot", "quick-xml", "serde_json", "serde/std", "snafu/std", "utf-8", "vek/std"]
more-image-formats = ["image/webp", "image/pnm", "image/ico", "image/jpeg", "image/tiff", "image/tga", "image/bmp", "image/hdr"]
image-shrinking = ["std", "bytemuck", "more-image-formats"]
rendering = ["std", "more-image-formats", "euclid", "lyon", "ttf-parser", "rustybuzz", "bytemuck/derive"]
font-loading = ["std", "rendering", "font-kit"]
software-rendering = ["rendering", "euc", "vek", "derive_more/mul"]
wasm-web = ["std", "web-sys", "chrono/wasmbind", "livesplit-hotkey/wasm-web"]
networking = ["std", "splits-io-api"]

# FIXME: Some targets don't have atomics, but we can't test for this properly
# yet. So there's a feature you explicitly have to opt into to deactivate the
# usage of atomics. Vice versa would be too dangerous, as `default-features =
# false` would deactivate atomics then. However there's also `cargo test
# --all-features`, which is equally dangerous. To detect this, we have an
# additional `internal-use-all-features` feature that is only ever activated
# when `--all-features` is passed, so we can ignore the `doesnt-have-atomics` in
# that case. https://github.com/rust-lang/rust/issues/32976
internal-use-all-features = []

[lib]
bench = false

[[bench]]
name = "balanced_pb"
harness = false

[[bench]]
name = "dummy_rendering"
harness = false

[[bench]]
name = "layout_state"
harness = false

[[bench]]
name = "parsing"
harness = false

[[bench]]
name = "software_rendering"
harness = false

[profile.release]
lto = true
panic = "abort"

[profile.release.build-override]
opt-level = 0
